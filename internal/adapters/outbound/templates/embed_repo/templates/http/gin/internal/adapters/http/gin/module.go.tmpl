package httpgin

import (
	"context"
	"log/slog"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/spf13/viper"
	"go.uber.org/fx"
	"{{ .Module }}/internal/adapters"
)

// httpConfig holds minimal server configuration.
type httpConfig struct {
	Addr string ` + "`" + `mapstructure:"server.http.addr"` + "`" + `
}

func loadHTTPConfig() *httpConfig {
	// Defaults
	addr := ":8080"
	// Support PORT env as a common convention
	if p := os.Getenv("PORT"); p != "" {
		addr = ":" + p
	}
	// Try read config/config.yml; ignore errors and fall back to defaults
	v := viper.New()
	v.SetConfigName("config")
	v.SetConfigType("yaml")
	v.AddConfigPath("config")
	_ = v.ReadInConfig()
	if v.IsSet("server.http.addr") {
		addr = v.GetString("server.http.addr")
	}
	return &httpConfig{Addr: addr}
}

// newEngine constructs a gin.Engine with middlewares and routes.
func newEngine(log *slog.Logger) *gin.Engine {
	gin.SetMode(gin.ReleaseMode)
	r := gin.New()
	r.Use(gin.Recovery())
	r.Use(requestID())
	r.Use(requestLogger(log))
	r.Use(corsAllowAll())

	// Health endpoint
	r.GET("/healthz", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "ok"})
	})
	// Prometheus metrics
	r.GET("/metrics", gin.WrapH(promhttp.Handler()))
	return r
}

// startServer registers lifecycle hooks to start/stop HTTP server.
func startServer(lc fx.Lifecycle, log *slog.Logger, cfg *httpConfig, engine *gin.Engine) {
	server := &http.Server{Addr: cfg.Addr, Handler: engine}
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			go func() {
				if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
					log.Error("http server error", "err", err)
				}
			}()
			log.Info("http server started", "addr", cfg.Addr)
			return nil
		},
		OnStop: func(ctx context.Context) error {
			ctx, cancel := context.WithTimeout(ctx, 5*time.Second)
			defer cancel()
			log.Info("shutting down http server")
			return server.Shutdown(ctx)
		},
	})
}

// Module wires the HTTP server components.
func Module() fx.Option {
	return fx.Options(
		fx.Provide(
			loadHTTPConfig,
			newEngine,
		),
		fx.Invoke(startServer),
	)
}

func init() {
	// Register into base adapters module without file overwrite
	adapters.Register(Module())
}
