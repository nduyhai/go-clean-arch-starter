package http

import (
	"context"
	"log/slog"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"go.uber.org/fx"

	"{{ .Module }}/internal/platform/env"
	"{{ .Module }}/internal/adapters/inbound/http/user"
)

type Params struct {
	fx.In
	Lc     fx.Lifecycle
	Logger *slog.Logger
	Cfg    env.Config
	UserRoutes user.Routes
}

var Module = fx.Module(
	"http",
	fx.Provide(
		newEngine,
		user.NewRoutes,
	),
	fx.Invoke(runServer),
)

func newEngine() *gin.Engine {
	r := gin.New()
	r.Use(gin.Recovery(), gin.Logger())
	return r
}

func runServer(p Params, r *gin.Engine) {
	r.GET("/health", func(c *gin.Context) { c.JSON(http.StatusOK, gin.H{"status":"ok"}) })
	p.UserRoutes.Register(r)

	srv := &http.Server{
		Addr:         p.Cfg.HTTP.Addr,
		Handler:      r,
		ReadTimeout:  p.Cfg.HTTP.ReadTimeout,
		WriteTimeout: p.Cfg.HTTP.WriteTimeout,
	}
	p.Lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error { p.Logger.Info("http.start"); go srv.ListenAndServe(); return nil },
		OnStop:  func(ctx context.Context) error { p.Logger.Info("http.stop");  return srv.Shutdown(ctx) },
	})
}
