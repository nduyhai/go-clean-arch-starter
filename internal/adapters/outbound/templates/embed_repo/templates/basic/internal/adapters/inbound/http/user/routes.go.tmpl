package user

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"go.uber.org/fx"
	"{{ .Module }}/internal/core/usecase"
)

type Routes struct {
	fx.In
	UC *usecase.UserService
}

func NewRoutes(in Routes) Routes { return in }

func (r Routes) Register(e *gin.Engine) {
	e.POST("/api/users", func(c *gin.Context) {
		var req struct{ Name, Email string }
		if err := c.ShouldBindJSON(&req); err != nil { c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()}); return }
		u, err := r.UC.Create(c, req.Name, req.Email)
		if err != nil { c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()}); return }
		c.JSON(http.StatusCreated, u)
	})
	e.GET("/api/users/:id", func(c *gin.Context) {
		u, err := r.UC.Get(c, c.Param("id"))
		if err != nil { c.JSON(http.StatusNotFound, gin.H{"error": err.Error()}); return }
		c.JSON(http.StatusOK, u)
	})
	e.GET("/api/users", func(c *gin.Context) {
		users, err := r.UC.List(c, 0, 0)
		if err != nil { c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()}); return }
		c.JSON(http.StatusOK, users)
	})
}
