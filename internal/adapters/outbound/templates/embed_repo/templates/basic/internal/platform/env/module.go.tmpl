package env

import (
	"strings"
	"time"

	"github.com/spf13/viper"
	"go.uber.org/fx"
)

type HTTP struct {
	Addr         string        `mapstructure:"addr"`
	ReadTimeout  time.Duration `mapstructure:"read_timeout"`
	WriteTimeout time.Duration `mapstructure:"write_timeout"`
}

type GRPC struct {
	Addr string `mapstructure:"addr"`
}

type Database struct {
	URL string `mapstructure:"url"`
}

type Redis struct {
	URL string `mapstructure:"url"`
}

type Config struct {
	AppEnv   string   `mapstructure:"app_env"`
	HTTP     HTTP     `mapstructure:"server"`
	GRPC     GRPC     `mapstructure:"grpc"`
	Database Database `mapstructure:"database"`
	Redis    Redis    `mapstructure:"redis"`
}

// 1) Defaults < 2) YAML file config/config.yml < 3) ENV VARS  (env wins)
func loadViper() *viper.Viper {
	v := viper.New()

	// defaults
	v.SetDefault("app_env", "dev")
	v.SetDefault("server.addr", ":8080")
	v.SetDefault("server.read_timeout", "5s")
	v.SetDefault("server.write_timeout", "10s")
	v.SetDefault("grpc.addr", ":9090")
	v.SetDefault("database.url", "")
	v.SetDefault("redis.url", "")

	// config/config.yml (optional)
	v.AddConfigPath("config")
	v.SetConfigName("config")
	v.SetConfigType("yaml")
	_ = v.ReadInConfig() // ignore if not found

	// ENV overrides (SERVER_ADDR overrides server.addr, etc.)
	v.AutomaticEnv()
	v.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	// (optional) prefix: v.SetEnvPrefix("APP") â†’ APP_SERVER_ADDR, etc.

	return v
}

func provideConfig(v *viper.Viper) (Config, error) {
	var c Config
	if err := v.Unmarshal(&c); err != nil {
		return c, err
	}
	// normalize: ensure leading ":" for addrs
	if c.HTTP.Addr != "" && c.HTTP.Addr[0] != ':' { c.HTTP.Addr = ":" + c.HTTP.Addr }
	if c.GRPC.Addr != "" && c.GRPC.Addr[0] != ':' { c.GRPC.Addr = ":" + c.GRPC.Addr }
	return c, nil
}

var Module = fx.Module(
	"env",
	fx.Provide(
		loadViper,
		provideConfig,
	),
)
