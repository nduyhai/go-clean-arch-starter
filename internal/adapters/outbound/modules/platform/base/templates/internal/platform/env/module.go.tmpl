package env

import (
	"os"
	"strings"

	"github.com/spf13/viper"
	"go.uber.org/fx"
)

// Config holds application configuration loaded via Viper.
// Extend as needed in projects and other modules can read from it.
//
// Example corresponds to templates/config/config.yml.tmpl
// logger:
//   level: info
// server:
//   http:
//     addr: ":8080"

type Config struct {
	Logger struct {
		Level string `mapstructure:"level"`
	} `mapstructure:"logger"`
}

// Module provides *Config via Fx and sets up Viper to read config files and env.
func Module() fx.Option {
	return fx.Provide(func() *Config {
		v := viper.New()
		v.SetConfigName("config")
		v.SetConfigType("yaml")
		v.AddConfigPath("config")
		_ = v.ReadInConfig()
		// ENV overrides: APP_FOO_BAR => foo.bar
		v.SetEnvPrefix("")
		v.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
		v.AutomaticEnv()
		// Common convenience: PORT overrides server.http.addr
		if p := os.Getenv("PORT"); p != "" {
			v.Set("server.http.addr", ":"+p)
		}
		var cfg Config
		_ = v.Unmarshal(&cfg)
		return &cfg
	})
}
